# -*- coding: utf-8 -*-
"""bank pynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16YoAaQLViIzumobq9q1HP-9-gEJQ0Mnu
"""

import pandas as pd
import numpy as np

df = pd.read_excel('activity /Bank_Personal_Loan_Modelling.xlsx')

df

df.dtypes

df.drop(['ID','ZIP Code'],axis=1,inplace=True)

df

df = df.astype({'Family':'category','Education':'category','Personal Loan':'category','Securities Account':'category','CD Account':'category','Online':'category','CreditCard':'category'})

num=('Age','Experience','Income','Mortgage')

df.dtypes

cat = df.select_dtypes(include=('category')).columns

cat

num = df .select_dtypes(include=('int','float')).columns

num

df.dtypes

X = df.drop(['Personal Loan'],axis =1)



y = df['Personal Loan']

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test= train_test_split(X, y, test_size=0.2, random_state=101)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

from sklearn.preprocessing import MinMaxScaler, StandardScaler

scaler = StandardScaler()
X_train[num] = scaler.fit_transform(X_train[num])
X_test[num] = scaler.fit_transform(X_test[num])

from sklearn.linear_model import LogisticRegression

logr=LogisticRegression()

model_logr=logr.fit(X_train,y_train)

y_pred_test_logr=model_logr.predict(X_test)

y_pred_test_logr

y_pred_test_logr=model_logr.predict(X_train)

y_pred_test_logr

from sklearn.metrics import accuracy_score,recall_score,precision_score,confusion_matrix,classification_report
from sklearn.metrics import roc_curve,auc

def error_metrics(y_train,y_pred_test_logr):
    train_accuracy_1 = accuracy_score(y_train,y_pred_test_logr)
    train_recall_1 = recall_score(y_train,y_pred_test_logr)
    train_precision_1 = precision_score(y_train,y_pred_test_logr)
    print('accuracy:',train_accuracy_1)
    print('recall:',train_recall_1)
    print('precision:',train_precision_1)

error_metrics(y_train,y_pred_test_logr)

from sklearn.ensemble import RandomForestClassifier

clf1 = RandomForestClassifier(n_estimators=100)

clf1.fit(X_train, y_train)

y_pred=clf1.predict(X_test)

y_pred

y_pred=clf1.predict(X_train)

y_pred

def error_metrics(y_train,y_pred):
    train_accuracy_1 = accuracy_score(y_train,y_pred)
    train_recall_1 = recall_score(y_train,y_pred)
    train_precision_1 = precision_score(y_train,y_pred)
    print('accuracy:',train_accuracy_1)
    print('recall:',train_recall_1)
    print('precision:',train_precision_1)

error_metrics(y_train,y_pred)

import pickle

pickle_out=open("lr.pkl","wb")
pickle.dump(logr,pickle_out)
pickle_out.close()

logr.predict(X)



